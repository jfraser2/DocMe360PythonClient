# coding: utf-8

"""
    Available REST Services

    Request and Response format is JSON, Request validation is: jakarta validation enhanced with a Framework. Since there are so many ways to do Security. I choose a simple one for this project. The user must put a JWT Token in the request header or in a request cookie (will make the AngularJS folks happy). JWT Tokens copied directly from the site http://jwt.io may not work. Why you ask? On the Windows Platform the Character set gets changed, it is not longer UTF-8, it becomes Cp1252 (Eclipse Project Default). No worries, a Junit Test was made to build Tokens. It is called BuildJwtToken. For Swagger usage, copy the token from the Eclipse project Console instead. The Secret to making the JUnit produce a UTF-8 token is to set the Windows Environment Variable JAVA_TOOL_OPTIONS to value -Dfile.encoding=UTF-8

    The version of the OpenAPI document: 1.0.0
    Contact: jfraser2@yahoo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateNotification(BaseModel):
    """
    CreateNotification
    """ # noqa: E501
    phone_number: Annotated[str, Field(min_length=0, strict=True, max_length=20)] = Field(alias="phoneNumber")
    personalization: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=25)]] = None
    template_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="templateId")
    template_text: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=200)]] = Field(default=None, alias="templateText")
    __properties: ClassVar[List[str]] = ["phoneNumber", "personalization", "templateId", "templateText"]

    @field_validator('phone_number')
    @classmethod    
    def phone_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{3}[- .]?\d{3}[- .]?\d{4}$", value):
            raise ValueError(r"Phone Number must validate the regular expression /^\d{3}[- .]?\d{3}[- .]?\d{4}$/")
        return value

    @field_validator('template_id')
    @classmethod    
    def template_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]*", value):
            raise ValueError(r"Template Id must validate the regular expression /[0-9]*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "phoneNumber": obj.get("phoneNumber"),
            "personalization": obj.get("personalization"),
            "templateId": obj.get("templateId"),
            "templateText": obj.get("templateText")
        })
        return _obj



# coding: utf-8

"""
    Available REST Services

    Request and Response format is JSON, Request validation is: jakarta validation enhanced with a Framework. Since there are so many ways to do Security. I choose a simple one for this project. The user must put a JWT Token in the request header or in a request cookie (will make the AngularJS folks happy). JWT Tokens copied directly from the site http://jwt.io may not work. Why you ask? On the Windows Platform the Character set gets changed, it is not longer UTF-8, it becomes Cp1252 (Eclipse Project Default). No worries, a Junit Test was made to build Tokens. It is called BuildJwtToken. For Swagger usage, copy the token from the Eclipse project Console instead. The Secret to making the JUnit produce a UTF-8 token is to set the Windows Environment Variable JAVA_TOOL_OPTIONS to value -Dfile.encoding=UTF-8

    The version of the OpenAPI document: 1.0.0
    Contact: jfraser2@yahoo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_validation_error import ApiValidationError
from typing import Optional, Set
from typing_extensions import Self

class ApiError(BaseModel):
    """
    ApiError
    """ # noqa: E501
    request_status: Optional[StrictStr] = Field(default=None, alias="requestStatus")
    timestamp: Optional[datetime] = None
    message: Optional[StrictStr] = None
    debug_message: Optional[StrictStr] = Field(default=None, alias="debugMessage")
    sub_errors: Optional[List[ApiValidationError]] = Field(default=None, alias="subErrors")
    __properties: ClassVar[List[str]] = ["requestStatus", "timestamp", "message", "debugMessage", "subErrors"]

    @field_validator('timestamp')
    @classmethod    
    def timestamp_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4} (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]) ([A-Za-z]{3}) \([+\-]\d{2}:\d{2}\)$", value):
            raise ValueError(r"timestamp must validate the regular expression /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4} (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]) ([A-Za-z]{3}) \([+\-]\d{2}:\d{2}\)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_errors (list)
        _items = []
        if self.sub_errors:
            for _item_sub_errors in self.sub_errors:
                if _item_sub_errors:
                    _items.append(_item_sub_errors.to_dict())
            _dict['subErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestStatus": obj.get("requestStatus"),
            "timestamp": obj.get("timestamp"),
            "message": obj.get("message"),
            "debugMessage": obj.get("debugMessage"),
            "subErrors": [ApiValidationError.from_dict(_item) for _item in obj["subErrors"]] if obj.get("subErrors") is not None else None
        })
        return _obj


